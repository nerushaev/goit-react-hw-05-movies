{"version":3,"file":"static/js/484.958381be.chunk.js","mappings":"iRAOe,SAASA,IAAS,IAAD,EAC9B,GAA0BC,EAAAA,EAAAA,UAAS,MAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KACA,GAA4BJ,EAAAA,EAAAA,UAAS,IAArC,eAAOK,EAAP,KAAeC,EAAf,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAW,UAAGF,EAAaG,IAAI,eAApB,QAA+B,IAOhDC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAU,mCAAG,2FACjBT,GAAW,GADM,mBAGEU,EAAAA,EAAAA,IAAgBJ,GAHlB,OAGXK,EAHW,OAIjBT,EAAUS,EAAKC,SAJE,gDAMjBd,EAAS,EAAD,IANS,yBAQjBE,GAAW,GARM,4EAAH,qDAWZM,GACFG,GAEH,GAAE,CAACH,IAEJ,IAEMO,EAAY,mCAAG,WAAOC,GAAP,8EACnBA,EAAEC,iBACFf,GAAW,GAFQ,mBAIEU,EAAAA,EAAAA,IAAgBJ,GAJlB,OAIXK,EAJW,OAKjBT,EAAUS,EAAKC,SALE,gDAOjBd,EAAS,EAAD,IAPS,yBASjBE,GAAW,GATM,4EAAH,sDAalB,OACE,kBAAMgB,UAAU,UAAhB,WACE,0BACE,kBAAMC,SAAUJ,EAAhB,WACF,kBAAOK,SAAU,SAACJ,GAAD,OAzCQK,EAyCiBL,EAAEM,OAAOC,WAvCrDhB,EAD4B,KAATc,EAAc,CAAEA,KAAAA,GAAS,CAAC,GADnB,IAACA,CAyCR,EAA0CG,KAAK,OAAOH,KAAK,SAASE,MAAOf,KAC5F,mBAAQU,UAAU,aAAaM,KAAK,SAApC,0BAGA,gBAAIN,UAAU,cAAd,UACGjB,IAAW,SAACwB,EAAA,EAAD,IACXtB,IAAU,SAACuB,EAAA,EAAD,CAAYb,KAAMV,IAC5BJ,IAAS,yDA1BD,OA+BhB,C","sources":["pages/Movie/Movie.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { fetchQueryMovie } from 'api/api';\nimport MoviesItem from 'components/MoviesItem/MoviesItem';\nimport { useSearchParams } from 'react-router-dom';\nimport './Movie.css'\nimport Loader from 'components/Loader/Loader';\n\nexport default function Movie() {\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [movies, setMovies] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const productName = searchParams.get(\"name\") ?? \"\";\n\n    const updateQueryString = (name) => {\n    const nextParams = name !== \"\" ? { name } : {};\n    setSearchParams(nextParams);\n    };\n  \n  useEffect(() => {\n    const fetchMovie = async () => {\n      setLoading(true)\n    try {\n      const data = await fetchQueryMovie(productName);\n      setMovies(data.results)\n    } catch (e) {\n      setError(e)\n    } finally {\n      setLoading(false)\n    }\n    }\n    if (productName) {\n      fetchMovie();\n    }\n  }, [productName])\n\n  let notFound = false;\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setLoading(true)\n    try {\n      const data = await fetchQueryMovie(productName);\n      setMovies(data.results)\n    } catch (e) {\n      setError(e)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  return (\n    <main className=\"wrapper\">\n      <div>\n        <form onSubmit={handleSubmit}>\n      <input onChange={(e) => updateQueryString(e.target.value)} type=\"text\" name=\"search\" value={productName}/>\n      <button className=\"search-btn\" type=\"submit\">Search</button>\n        </form>\n      </div>\n      <ul className=\"movies-list\">\n        {loading && <Loader />}\n        {movies && <MoviesItem data={movies} />}\n        {error && <p>An unexpected error occurred</p>}\n        {notFound && <p>Sorry, movie not found</p>}\n      </ul>\n    </main>\n  )\n}\n"],"names":["Movie","useState","error","setError","loading","setLoading","movies","setMovies","useSearchParams","searchParams","setSearchParams","productName","get","useEffect","fetchMovie","fetchQueryMovie","data","results","handleSubmit","e","preventDefault","className","onSubmit","onChange","name","target","value","type","Loader","MoviesItem"],"sourceRoot":""}